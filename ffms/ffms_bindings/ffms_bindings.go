// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 02 Jul 2025 23:31:51 UTC.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package ffms_bindings

/*
#cgo pkg-config: ffms2
#include "ffms.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Init function as declared in include/ffms.h:421
func Init(arg0 int32, arg1 int32) {
	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.int)(arg1), cgoAllocsUnknown
	C.FFMS_Init(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// GetVersion function as declared in include/ffms.h:422
func GetVersion() int32 {
	__ret := C.FFMS_GetVersion()
	__v := (int32)(__ret)
	return __v
}

// GetLogLevel function as declared in include/ffms.h:423
func GetLogLevel() int32 {
	__ret := C.FFMS_GetLogLevel()
	__v := (int32)(__ret)
	return __v
}

// SetLogLevel function as declared in include/ffms.h:424
func SetLogLevel(level int32) {
	clevel, clevelAllocMap := (C.int)(level), cgoAllocsUnknown
	C.FFMS_SetLogLevel(clevel)
	runtime.KeepAlive(clevelAllocMap)
}

// CreateVideoSource function as declared in include/ffms.h:425
func CreateVideoSource(sourceFile string, track int32, index []Index, threads int32, seekMode int32, errorInfo []ErrorInfo) *VideoSource {
	csourceFile, csourceFileAllocMap := unpackPCharString(sourceFile)
	ctrack, ctrackAllocMap := (C.int)(track), cgoAllocsUnknown
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	cthreads, cthreadsAllocMap := (C.int)(threads), cgoAllocsUnknown
	cseekMode, cseekModeAllocMap := (C.int)(seekMode), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_CreateVideoSource(csourceFile, ctrack, cindex, cthreads, cseekMode, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cseekModeAllocMap)
	runtime.KeepAlive(cthreadsAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(ctrackAllocMap)
	runtime.KeepAlive(csourceFileAllocMap)
	__v := *(**VideoSource)(unsafe.Pointer(&__ret))
	return __v
}

// CreateAudioSource function as declared in include/ffms.h:426
func CreateAudioSource(sourceFile string, track int32, index []Index, delayMode int32, errorInfo []ErrorInfo) *AudioSource {
	csourceFile, csourceFileAllocMap := unpackPCharString(sourceFile)
	ctrack, ctrackAllocMap := (C.int)(track), cgoAllocsUnknown
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	cdelayMode, cdelayModeAllocMap := (C.int)(delayMode), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_CreateAudioSource(csourceFile, ctrack, cindex, cdelayMode, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cdelayModeAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(ctrackAllocMap)
	runtime.KeepAlive(csourceFileAllocMap)
	__v := *(**AudioSource)(unsafe.Pointer(&__ret))
	return __v
}

// CreateAudioSource2 function as declared in include/ffms.h:427
func CreateAudioSource2(sourceFile string, track int32, index []Index, delayMode int32, fillGaps int32, drcScale float64, errorInfo []ErrorInfo) *AudioSource {
	csourceFile, csourceFileAllocMap := unpackPCharString(sourceFile)
	ctrack, ctrackAllocMap := (C.int)(track), cgoAllocsUnknown
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	cdelayMode, cdelayModeAllocMap := (C.int)(delayMode), cgoAllocsUnknown
	cfillGaps, cfillGapsAllocMap := (C.int)(fillGaps), cgoAllocsUnknown
	cdrcScale, cdrcScaleAllocMap := (C.double)(drcScale), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_CreateAudioSource2(csourceFile, ctrack, cindex, cdelayMode, cfillGaps, cdrcScale, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cdrcScaleAllocMap)
	runtime.KeepAlive(cfillGapsAllocMap)
	runtime.KeepAlive(cdelayModeAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(ctrackAllocMap)
	runtime.KeepAlive(csourceFileAllocMap)
	__v := *(**AudioSource)(unsafe.Pointer(&__ret))
	return __v
}

// DestroyVideoSource function as declared in include/ffms.h:428
func DestroyVideoSource(v []VideoSource) {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	C.FFMS_DestroyVideoSource(cv)
	runtime.KeepAlive(cvAllocMap)
}

// DestroyAudioSource function as declared in include/ffms.h:429
func DestroyAudioSource(a []AudioSource) {
	ca, caAllocMap := (*C.FFMS_AudioSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	C.FFMS_DestroyAudioSource(ca)
	runtime.KeepAlive(caAllocMap)
}

// GetVideoProperties function as declared in include/ffms.h:430
func GetVideoProperties(v []VideoSource) *VideoProperties {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetVideoProperties(cv)
	runtime.KeepAlive(cvAllocMap)
	__v := NewVideoPropertiesRef(unsafe.Pointer(__ret))
	return __v
}

// GetAudioProperties function as declared in include/ffms.h:431
func GetAudioProperties(a []AudioSource) *AudioProperties {
	ca, caAllocMap := (*C.FFMS_AudioSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetAudioProperties(ca)
	runtime.KeepAlive(caAllocMap)
	__v := NewAudioPropertiesRef(unsafe.Pointer(__ret))
	return __v
}

// GetFrame function as declared in include/ffms.h:432
func GetFrame(v []VideoSource, n int32, errorInfo []ErrorInfo) *Frame {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	cn, cnAllocMap := (C.int)(n), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_GetFrame(cv, cn, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cnAllocMap)
	runtime.KeepAlive(cvAllocMap)
	__v := NewFrameRef(unsafe.Pointer(__ret))
	return __v
}

// GetFrameByTime function as declared in include/ffms.h:433
func GetFrameByTime(v []VideoSource, time float64, errorInfo []ErrorInfo) *Frame {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	ctime, ctimeAllocMap := (C.double)(time), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_GetFrameByTime(cv, ctime, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(ctimeAllocMap)
	runtime.KeepAlive(cvAllocMap)
	__v := NewFrameRef(unsafe.Pointer(__ret))
	return __v
}

// GetAudio function as declared in include/ffms.h:434
func GetAudio(a []AudioSource, buf unsafe.Pointer, start int64, count int64, errorInfo []ErrorInfo) int32 {
	ca, caAllocMap := (*C.FFMS_AudioSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	cbuf, cbufAllocMap := buf, cgoAllocsUnknown
	cstart, cstartAllocMap := (C.int64_t)(start), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int64_t)(count), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_GetAudio(ca, cbuf, cstart, ccount, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cstartAllocMap)
	runtime.KeepAlive(cbufAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SetOutputFormatV2 function as declared in include/ffms.h:435
func SetOutputFormatV2(v []VideoSource, targetFormats []int32, width int32, height int32, resizer int32, errorInfo []ErrorInfo) int32 {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	ctargetFormats, ctargetFormatsAllocMap := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&targetFormats)).Data)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int)(height), cgoAllocsUnknown
	cresizer, cresizerAllocMap := (C.int)(resizer), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_SetOutputFormatV2(cv, ctargetFormats, cwidth, cheight, cresizer, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cresizerAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(ctargetFormatsAllocMap)
	runtime.KeepAlive(cvAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ResetOutputFormatV function as declared in include/ffms.h:436
func ResetOutputFormatV(v []VideoSource) {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	C.FFMS_ResetOutputFormatV(cv)
	runtime.KeepAlive(cvAllocMap)
}

// SetInputFormatV function as declared in include/ffms.h:437
func SetInputFormatV(v []VideoSource, colorSpace int32, colorRange int32, format int32, errorInfo []ErrorInfo) int32 {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	ccolorSpace, ccolorSpaceAllocMap := (C.int)(colorSpace), cgoAllocsUnknown
	ccolorRange, ccolorRangeAllocMap := (C.int)(colorRange), cgoAllocsUnknown
	cformat, cformatAllocMap := (C.int)(format), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_SetInputFormatV(cv, ccolorSpace, ccolorRange, cformat, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cformatAllocMap)
	runtime.KeepAlive(ccolorRangeAllocMap)
	runtime.KeepAlive(ccolorSpaceAllocMap)
	runtime.KeepAlive(cvAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ResetInputFormatV function as declared in include/ffms.h:438
func ResetInputFormatV(v []VideoSource) {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	C.FFMS_ResetInputFormatV(cv)
	runtime.KeepAlive(cvAllocMap)
}

// CreateResampleOptions function as declared in include/ffms.h:439
func CreateResampleOptions(a []AudioSource) *ResampleOptions {
	ca, caAllocMap := (*C.FFMS_AudioSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_CreateResampleOptions(ca)
	runtime.KeepAlive(caAllocMap)
	__v := NewResampleOptionsRef(unsafe.Pointer(__ret))
	return __v
}

// SetOutputFormatA function as declared in include/ffms.h:440
func SetOutputFormatA(a []AudioSource, options []ResampleOptions, errorInfo []ErrorInfo) int32 {
	ca, caAllocMap := (*C.FFMS_AudioSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	coptions, coptionsAllocMap := unpackArgSResampleOptions(options)
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_SetOutputFormatA(ca, coptions, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	packSResampleOptions(options, coptions)
	runtime.KeepAlive(coptionsAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (int32)(__ret)
	return __v
}

// DestroyResampleOptions function as declared in include/ffms.h:441
func DestroyResampleOptions(options []ResampleOptions) {
	coptions, coptionsAllocMap := unpackArgSResampleOptions(options)
	C.FFMS_DestroyResampleOptions(coptions)
	packSResampleOptions(options, coptions)
	runtime.KeepAlive(coptionsAllocMap)
}

// DestroyIndex function as declared in include/ffms.h:442
func DestroyIndex(index []Index) {
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	C.FFMS_DestroyIndex(cindex)
	runtime.KeepAlive(cindexAllocMap)
}

// GetFirstTrackOfType function as declared in include/ffms.h:443
func GetFirstTrackOfType(index []Index, trackType int32, errorInfo []ErrorInfo) int32 {
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	ctrackType, ctrackTypeAllocMap := (C.int)(trackType), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_GetFirstTrackOfType(cindex, ctrackType, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(ctrackTypeAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetFirstIndexedTrackOfType function as declared in include/ffms.h:444
func GetFirstIndexedTrackOfType(index []Index, trackType int32, errorInfo []ErrorInfo) int32 {
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	ctrackType, ctrackTypeAllocMap := (C.int)(trackType), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_GetFirstIndexedTrackOfType(cindex, ctrackType, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(ctrackTypeAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetNumTracks function as declared in include/ffms.h:445
func GetNumTracks(index []Index) int32 {
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetNumTracks(cindex)
	runtime.KeepAlive(cindexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetNumTracksI function as declared in include/ffms.h:446
func GetNumTracksI(indexer []Indexer) int32 {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetNumTracksI(cindexer)
	runtime.KeepAlive(cindexerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetTrackType function as declared in include/ffms.h:447
func GetTrackType(t []Track) int32 {
	ct, ctAllocMap := (*C.FFMS_Track)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&t)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetTrackType(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetTrackTypeI function as declared in include/ffms.h:448
func GetTrackTypeI(indexer []Indexer, track int32) int32 {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	ctrack, ctrackAllocMap := (C.int)(track), cgoAllocsUnknown
	__ret := C.FFMS_GetTrackTypeI(cindexer, ctrack)
	runtime.KeepAlive(ctrackAllocMap)
	runtime.KeepAlive(cindexerAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetErrorHandling function as declared in include/ffms.h:449
func GetErrorHandling(index []Index) IndexErrorHandling {
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetErrorHandling(cindex)
	runtime.KeepAlive(cindexAllocMap)
	__v := (IndexErrorHandling)(__ret)
	return __v
}

// GetCodecNameI function as declared in include/ffms.h:450
func GetCodecNameI(indexer []Indexer, track int32) *byte {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	ctrack, ctrackAllocMap := (C.int)(track), cgoAllocsUnknown
	__ret := C.FFMS_GetCodecNameI(cindexer, ctrack)
	runtime.KeepAlive(ctrackAllocMap)
	runtime.KeepAlive(cindexerAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// GetFormatNameI function as declared in include/ffms.h:451
func GetFormatNameI(indexer []Indexer) *byte {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetFormatNameI(cindexer)
	runtime.KeepAlive(cindexerAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// GetNumFrames function as declared in include/ffms.h:452
func GetNumFrames(t []Track) int32 {
	ct, ctAllocMap := (*C.FFMS_Track)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&t)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetNumFrames(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := (int32)(__ret)
	return __v
}

// GetFrameInfo function as declared in include/ffms.h:453
func GetFrameInfo(t []Track, frame int32) *FrameInfo {
	ct, ctAllocMap := (*C.FFMS_Track)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&t)).Data)), cgoAllocsUnknown
	cframe, cframeAllocMap := (C.int)(frame), cgoAllocsUnknown
	__ret := C.FFMS_GetFrameInfo(ct, cframe)
	runtime.KeepAlive(cframeAllocMap)
	runtime.KeepAlive(ctAllocMap)
	__v := NewFrameInfoRef(unsafe.Pointer(__ret))
	return __v
}

// GetTrackFromIndex function as declared in include/ffms.h:454
func GetTrackFromIndex(index []Index, track int32) *Track {
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	ctrack, ctrackAllocMap := (C.int)(track), cgoAllocsUnknown
	__ret := C.FFMS_GetTrackFromIndex(cindex, ctrack)
	runtime.KeepAlive(ctrackAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	__v := *(**Track)(unsafe.Pointer(&__ret))
	return __v
}

// GetTrackFromVideo function as declared in include/ffms.h:455
func GetTrackFromVideo(v []VideoSource) *Track {
	cv, cvAllocMap := (*C.FFMS_VideoSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&v)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetTrackFromVideo(cv)
	runtime.KeepAlive(cvAllocMap)
	__v := *(**Track)(unsafe.Pointer(&__ret))
	return __v
}

// GetTrackFromAudio function as declared in include/ffms.h:456
func GetTrackFromAudio(a []AudioSource) *Track {
	ca, caAllocMap := (*C.FFMS_AudioSource)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetTrackFromAudio(ca)
	runtime.KeepAlive(caAllocMap)
	__v := *(**Track)(unsafe.Pointer(&__ret))
	return __v
}

// GetTimeBase function as declared in include/ffms.h:457
func GetTimeBase(t []Track) *TrackTimeBase {
	ct, ctAllocMap := (*C.FFMS_Track)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&t)).Data)), cgoAllocsUnknown
	__ret := C.FFMS_GetTimeBase(ct)
	runtime.KeepAlive(ctAllocMap)
	__v := NewTrackTimeBaseRef(unsafe.Pointer(__ret))
	return __v
}

// WriteTimecodes function as declared in include/ffms.h:458
func WriteTimecodes(t []Track, timecodeFile string, errorInfo []ErrorInfo) int32 {
	ct, ctAllocMap := (*C.FFMS_Track)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&t)).Data)), cgoAllocsUnknown
	ctimecodeFile, ctimecodeFileAllocMap := unpackPCharString(timecodeFile)
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_WriteTimecodes(ct, ctimecodeFile, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(ctimecodeFileAllocMap)
	runtime.KeepAlive(ctAllocMap)
	__v := (int32)(__ret)
	return __v
}

// CreateIndexer function as declared in include/ffms.h:459
func CreateIndexer(sourceFile string, errorInfo []ErrorInfo) *Indexer {
	csourceFile, csourceFileAllocMap := unpackPCharString(sourceFile)
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_CreateIndexer(csourceFile, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(csourceFileAllocMap)
	__v := *(**Indexer)(unsafe.Pointer(&__ret))
	return __v
}

// CreateIndexer2 function as declared in include/ffms.h:460
func CreateIndexer2(sourceFile string, demuxerOptions []KeyValuePair, numOptions int32, errorInfo []ErrorInfo) *Indexer {
	csourceFile, csourceFileAllocMap := unpackPCharString(sourceFile)
	cdemuxerOptions, cdemuxerOptionsAllocMap := unpackArgSKeyValuePair(demuxerOptions)
	cnumOptions, cnumOptionsAllocMap := (C.int)(numOptions), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_CreateIndexer2(csourceFile, cdemuxerOptions, cnumOptions, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cnumOptionsAllocMap)
	packSKeyValuePair(demuxerOptions, cdemuxerOptions)
	runtime.KeepAlive(cdemuxerOptionsAllocMap)
	runtime.KeepAlive(csourceFileAllocMap)
	__v := *(**Indexer)(unsafe.Pointer(&__ret))
	return __v
}

// TrackIndexSettings function as declared in include/ffms.h:461
func TrackIndexSettings(indexer []Indexer, track int32, index int32, arg3 int32) {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	ctrack, ctrackAllocMap := (C.int)(track), cgoAllocsUnknown
	cindex, cindexAllocMap := (C.int)(index), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	C.FFMS_TrackIndexSettings(cindexer, ctrack, cindex, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(ctrackAllocMap)
	runtime.KeepAlive(cindexerAllocMap)
}

// TrackTypeIndexSettings function as declared in include/ffms.h:462
func TrackTypeIndexSettings(indexer []Indexer, trackType int32, index int32, arg3 int32) {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	ctrackType, ctrackTypeAllocMap := (C.int)(trackType), cgoAllocsUnknown
	cindex, cindexAllocMap := (C.int)(index), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	C.FFMS_TrackTypeIndexSettings(cindexer, ctrackType, cindex, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(ctrackTypeAllocMap)
	runtime.KeepAlive(cindexerAllocMap)
}

// SetProgressCallback function as declared in include/ffms.h:463
func SetProgressCallback(indexer []Indexer, iC TIndexCallback, iCPrivate unsafe.Pointer) {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	ciC, ciCAllocMap := iC.PassValue()
	ciCPrivate, ciCPrivateAllocMap := iCPrivate, cgoAllocsUnknown
	C.FFMS_SetProgressCallback(cindexer, ciC, ciCPrivate)
	runtime.KeepAlive(ciCPrivateAllocMap)
	runtime.KeepAlive(ciCAllocMap)
	runtime.KeepAlive(cindexerAllocMap)
}

// DoIndexing2 function as declared in include/ffms.h:464
func DoIndexing2(indexer []Indexer, errorHandling int32, errorInfo []ErrorInfo) *Index {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	cerrorHandling, cerrorHandlingAllocMap := (C.int)(errorHandling), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_DoIndexing2(cindexer, cerrorHandling, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cerrorHandlingAllocMap)
	runtime.KeepAlive(cindexerAllocMap)
	__v := *(**Index)(unsafe.Pointer(&__ret))
	return __v
}

// CancelIndexing function as declared in include/ffms.h:465
func CancelIndexing(indexer []Indexer) {
	cindexer, cindexerAllocMap := (*C.FFMS_Indexer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&indexer)).Data)), cgoAllocsUnknown
	C.FFMS_CancelIndexing(cindexer)
	runtime.KeepAlive(cindexerAllocMap)
}

// ReadIndex function as declared in include/ffms.h:466
func ReadIndex(indexFile string, errorInfo []ErrorInfo) *Index {
	cindexFile, cindexFileAllocMap := unpackPCharString(indexFile)
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_ReadIndex(cindexFile, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cindexFileAllocMap)
	__v := *(**Index)(unsafe.Pointer(&__ret))
	return __v
}

// ReadIndexFromBuffer function as declared in include/ffms.h:467
func ReadIndexFromBuffer(buffer []byte, size uint64, errorInfo []ErrorInfo) *Index {
	cbuffer, cbufferAllocMap := (*C.uint8_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buffer)).Data)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.size_t)(size), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_ReadIndexFromBuffer(cbuffer, csize, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	__v := *(**Index)(unsafe.Pointer(&__ret))
	return __v
}

// IndexBelongsToFile function as declared in include/ffms.h:468
func IndexBelongsToFile(index []Index, sourceFile string, errorInfo []ErrorInfo) int32 {
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	csourceFile, csourceFileAllocMap := unpackPCharString(sourceFile)
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_IndexBelongsToFile(cindex, csourceFile, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(csourceFileAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// WriteIndex function as declared in include/ffms.h:469
func WriteIndex(indexFile string, index []Index, errorInfo []ErrorInfo) int32 {
	cindexFile, cindexFileAllocMap := unpackPCharString(indexFile)
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_WriteIndex(cindexFile, cindex, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cindexFileAllocMap)
	__v := (int32)(__ret)
	return __v
}

// WriteIndexToBuffer function as declared in include/ffms.h:470
func WriteIndexToBuffer(bufferPtr [][]byte, size []uint64, index []Index, errorInfo []ErrorInfo) int32 {
	cbufferPtr, cbufferPtrAllocMap := unpackArgSSByte(bufferPtr)
	csize, csizeAllocMap := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&size)).Data)), cgoAllocsUnknown
	cindex, cindexAllocMap := (*C.FFMS_Index)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&index)).Data)), cgoAllocsUnknown
	cerrorInfo, cerrorInfoAllocMap := unpackArgSErrorInfo(errorInfo)
	__ret := C.FFMS_WriteIndexToBuffer(cbufferPtr, csize, cindex, cerrorInfo)
	packSErrorInfo(errorInfo, cerrorInfo)
	runtime.KeepAlive(cerrorInfoAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	packSSByte(bufferPtr, cbufferPtr)
	runtime.KeepAlive(cbufferPtrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// FreeIndexBuffer function as declared in include/ffms.h:471
func FreeIndexBuffer(bufferPtr [][]byte) {
	cbufferPtr, cbufferPtrAllocMap := unpackArgSSByte(bufferPtr)
	C.FFMS_FreeIndexBuffer(cbufferPtr)
	packSSByte(bufferPtr, cbufferPtr)
	runtime.KeepAlive(cbufferPtrAllocMap)
}

// GetPixFmt function as declared in include/ffms.h:472
func GetPixFmt(name string) int32 {
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.FFMS_GetPixFmt(cname)
	runtime.KeepAlive(cnameAllocMap)
	__v := (int32)(__ret)
	return __v
}
